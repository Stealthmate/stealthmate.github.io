---
layout: experience
title: BERT 系モデル学習・運用システムの開発
toc: true
date: 2024-08-01
custom:
  period: 2024 年
  affiliation:
    title: LINEヤフー株式会社
    link: '#hist-ly-newgrad'
  tags:
    - Python
    - Typescript
    - React
    - Kubernetes
---

## 概要

新卒で入社して約 3 ヶ月間の研修を終えてから、不正コンテンツ対策に利用されるシステムの開発を行っているチームに配属され、半年ほどそこで働きました。

このシステムの主な機能としてモデルの作成（学習）、デプロイ（推論サーバーへの配置等）とバッチ推論がありました。これらを扱うのに簡単な FE (生 JS、後に React へ移行) があり、裏の処理は Python の BE によって実行され、FE/BE ともに Kubernetes 上にデプロイされていました。

チーム編成は以下でした。

- 開発者 4 人（私含め）
- データサイエンティスト 1 人
- Product Owner

## 私の貢献

### FE の React 移行

配属されたのと同じぐらいのタイミングで FE を React へ移行しようという話がすでに走っており、その実装の半分程を私がやることになりました。移行自体の理由は、生 JS だとあまりにもコードの拡張性が悪く開発スピードが落ちてしまうためでした。

私はもちろん開発はしましたが本質的な貢献を言うと、**今すぐやらなくても良い部分の見切りをつけ、それをチームに訴え、結果として他に大事な仕事に集中できる時間を作りました**。以下詳細な話です。

このプロジェクトは実質的には既存システムの作り直し、かつ既存要件をそのまま維持する方針だったので、仕事のほとんどは決まった要件のコードを決まった形式で実装するという、理論上は楽でつまらないはずの仕事でした。しかしいざやってみると、 React 上での定番的な DOM の組み方と既存コードの DOM の組み方に衝突が生まれ、結果 E2E テストが壊れ始めました。そうなると選択肢は 2 つ。

1. React のベストプラクティスと真反対なことをやってでもテストを通すか。
2. React のベストプラクティスをなるべく守りつつ、テストの変更を最小に抑える。

最初は後者で進めようとしたが、そうすると今度は UI のデザイン自体が妨げになりはじめました。というのも、ある程度の規模のサイトなら汎用的なコンポーネントを作って使いまわすのが定番になるはずのところ、既存システムでは実質あらゆるページに微調整が入り汎用的なコンポーネントがそもそもキレイに作れないことが分かりました。

この状態でベストプラクティスの実装と既存要件の維持を両方狙うのは負荷が高く、リターンがコストに見合わないとチームで判断しました。その判断を持って以下の決断をしました。

- React があれば新規で書くコードをキレイかつ楽に書けるので、この PJ の目的は React が使える状態に留めることにする。
- 最初に決めていた締切（発動から合計 2 ヶ月）はそのまま残して、守り切る。
- 既存コードをゼロからキレイに作り直すのは手間がかかりすぎるので、 雑なままコピペして React との繋げ込みだけを行う。
  - これで E2E テストをほぼ変更せずに実装できるはず。

要するに元々のプロジェクトを React への移行と既存コードのリファクタに切り分けて、今回は前者だけやるということです。なぜかというと、既存コードはすでに動いているしそこをわざわざ作り変える需要もさほどなかったからです。一方、このプロジェクトではない、他の仕事もバックログに溜まっていたのでそこを優先した方が良いよねと考えた訳です。

### Kubernetes クラスタの縮小とコスト最適化

このシステムの Kubernetes クラスタには色んなコンポーネントが稼働しており、中にはそもそも利用されているか分からない程のレガシー的なものも含まれていました。一方、将来のトラフィック増加に備えてクラスタの規模が大きかったのですが、実際のメトリクスを見るとそのほとんどが常に眠っている状況でした。

ここでの**私の貢献は、クラスタの無駄遣いの問題提起と実際の縮小の実現**でした。具体的には

1. 縮小を正当化するのに人用な情報を調査し、
2. 移行計画を立て、
3. 作業分担を決め、
4. 無事に縮小を実現しました。

調査に関しては主に以下を調べました。

- クラスタの現状の利活用状態と月額費用
- 必要なパフォーマンスを維持するのに必要なリソース数
- 利用可能なノード flavor とそれらの月額費用
- 理想通り減らせた場合、月額でいくらの費用を節約できるか

結論として、月額費用を 30% 削減できることがわかったのでそれをチームと共有し、縮小を進めることにしました。

移行計画については、クラスタが複数個あったのでどのクラスタをどのタイミングで、どの程度、どういう手順で縮小していくかなどを明文化しチームに共有しました。

作業分担に関しては、私一人では全部やっても良かったのですが他のメンバーが Kubernetes 経験をあまり持っておらず、私がいない間に何かが起こると問題だと（私が）判断して、敢えて複数人で作業を進めることにしました。何回かに分けて縮小を行ってたので、一回一回違う人がやるという方針にして、全員が一回手で覚える機会を作りました。

結果として縮小が無事に終わり、元に比べて月額 30% の費用を削減することができました。

### チームマネジメント及びタスク管理

配属を受けて 1 〜 2ヶ月経ったあたりからチーム内の問題が少しずつ見えてきました。具体的には：

1. 何がやらなければならない仕事のか、何がやらなくても良い仕事なのかの線引きが為されておらず、仕事が終わったのか終わってないのかが分からない状態が蔓延していた。
2. 属人化が激しく、システムの個別の部分についての知識が個々の社員に閉じられていた。例えば、とある部分に対して開発をするときはその部分に詳しい人間に質問、変更許可、レビューなどを受けないといけない状態が起こり、その人が休んだり他のことで忙しかったりすると仕事が実質的に止まっていた。

少なくとも私は、この 2 つの問題の影響で大きなストレスを抱えていました。私が新人だったのも理由の一つだとは思いますが、[マネジメント系の本もそこそこ読んでいた](https://stealthmate.github.io/personal-library/)のでこういう状態は決して良いものではないと直感的に思いました。

ここでの**私の貢献はチームマネジメントを実質自分で進め始め、仕事に明確な線引きを設けることのメリットと属人化のデメリットをメンバーに教え、やり方のお手本を見せたこと**です。実際にやったこととしては以下です。

- 「コードが分からない」状態を装って、他の開発者をペアプロに誘って少しずつ仲良くなりました。
- 他の開発者が、 1on1 では言うけど朝会等人前では言わないような、面倒だと思われかねないような意見を、私の意見として私が提起していました。
- 逆に自分の意見を聞かれたときに、自分では敢えて意見を言わず「私には分からないので 〇〇 さんの意見を聞きたい」と他のメンバーを指名して発言する場を与えました。
- 朝会のファシリに手を挙げ、それを利用して朝会の進め方自体を変えました。

サイコパスに聞こえるような話ですが、この活動を 1 ヶ月続けたぐらいでメンバーの発現量が圧倒的に増えました。今まで黙って飲み込んでた人が、何の違和感もなく「あ、それ違うかも」と普通にみんなの前で意見を言ってくれるようになりました。

これと同時に、朝会の進め方を「個人が自分のやった内容を報告する」というスタイルから「今チームが持っているタスクについて、どれがどういう状態で、今日は誰がどこをやるのかを決める」というスタイルに変えました。そのおかげで仕事を途中で入れ替える（例えば私が途中までやって次の日休んだら別の人がそのまま続ける）ことができるようになり、私がみんなに属人化の問題を訴えたらむしろ意図的にタスクを入れ替えることが増えました。結果として、今までほぼ FE にしか触れてこなかった人が BE の開発が少しだけできるようになったり、今まで FE を触ってこなかった人が FE を少しだけ理解できるようになったりと、知識の流動性が増えて質の高い議論と意思決定ができるようになりました。
