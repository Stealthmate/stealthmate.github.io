---
layout: experience
title: TLS 通信監視用 ETL の開発
toc: true
date: 2023-09-01
custom:
  period: 2023 年
  affiliation:
    title: LINEヤフー株式会社
    link: '#hist-ly-sec-eng'
  tags:
    - Python
    - TLS
    - UNIX
    - Kubernetes
    - Prometheus
---

## 概要

旧 LINE 株式会社のセキュリティ部門でアルバイトしていたとき、 TLS 通信に対して復号化せずに機械学習を使ってマルウェアの検出を行うシステムの構築と運用を任されたことがあります。このプロジェクトは元々第三者の研究機関との共同研究として誕生し、私が関わり始めたころには機械学習モデルがすでにできていたのてそれをいざ本番環境に載せることを求められました。

途中までは主に私ともう一人の開発者で進めていたのですが、後に私が新卒入社しセキュリティ部門から外れたので現在の進捗はわかっていません。

## 私の貢献

ここでの**私の主な貢献は、大量の TLS 通信を効率良く捌く ETL パイプラインの構築**でした。予め言ってくと、 ETL を組むのは初めての経験だったのでアピールポイントより問題点の方が多いと思いますが、我ながらベストプラクティスを調べたり自分で時間をかけて考えていたので少しだけここでも触れておきます。

大局的な構造としては主に以下のコンポーネントで構築しました。

1. 通信監視サーバー: 実際の NW 機器と接続し、推論に必要なデータを抽出し、ディスク（nfs で共有されたもの）に保管していく。
2. 前処理モデュール: 通信監視サーバーが保管したデータに更に前処理を施し次に流したり、学習用に保存したりなどする。
3. 推論処理モデュール: 前処理されたデータに対し推論を行い、結果を保存する。
4. Prometheus: 各々のモデュールを監視し、必要あればアラートを発火する。
5. ETL用 Kubernetes クラスタ: 前処理モデュール、推論処理モデュール、Prometheus などをデプロイするための環境。

この中で私が一番作り込んだのは前処理モデュールだったので、それについて少し書きます。なお推論処理モデュールは研究者が用意したコードをほぼほぼコピペで作れました。

前処理モデュールは Python で書かれたもので、いくつかの CLI ツールをつなげ、それらの間に流れているデータのメトリクスを取るのが主な役割でした。一見 shell でも十分じゃないかと思ってしまいそうなもので、実際に PoC のときは shell で組まれていたのですがそのままだと問題が起きたり監視ができなかったりなどの問題があったので Python で書きました。

ここで一番面白かった点は unix socket の利用でした。 shell を遣うときに何も考えずに挟む縦棒 (`|`) が、実際に OS レベルではどういう働きをしているのかをかなり深く理解できました。というのも、 Python ではない CLI ツールにデータを流し、さらにどこまでのデータが処理されたのかのメトリクスを出すには入出力をこまめに見る必要があり、地道に縦棒を使うわけにもいかず unix socket を立ててそこに部分的にデータを書き込んだり読み込んだりする処理が必要になりました。それだけで一つの記事が書けるのでここでは省略しますが、とにかく良い勉強になったし最終的にはちゃんと動いたと記憶しています。そのおかげで Prometheus 用のメトリクスを出力（これも自家実装）することができ、大量のトラフィックがきちんと捌かれていることが確認できました。
