---
layout: experience
title: 認証サーバーの構築と開発 (TODO)
toc: true
date: 2023-03-01
custom:
  period: 2023 年
  affiliation:
    title: LINEヤフー株式会社
    link: '#hist-ly-sec-eng'
---

## 概要

従業員がリモート就業時に利用する VPN の認証基盤。主なパーツは以下です。
- RADIUS プロトコルによる認証問い合わせを REST に変換して認証を媒介するシステム (Rust, FreeRADIUS)
- 従業員データベースと通信して認証認可の処理を行うシステム（Python）
- 認可情報を管理するための UI (Svelte)
- これらがデプロイされる Kubernetes クラスタと、そのクラスタを監視するためのログ・モニタリング周り（ Prometheus, FluentBit）

## チーム情報

開発者は私と A さんの二人。加えて要件定義者が 1 人。

最初のたたき台（Rust サーバー、Python サーバー、Svelte サーバーの分け方とそれらが全部つながって機能するための PoC 程度の繋げ込み）は A さんが一人で作成していました。いざ本格的に作ろうとなったタイミングで私も加わりました。その直後ぐらいに A さんが 4 ヶ月の育休に入ったため私が一人で開発を進め、 A さんが復活してから更に２〜３ヶ月ほど二人で開発を続けました。

## 私が貢献したポイント

ほぼほぼゼロからすべて作ったので「開発内容」で言えば上のすべてになるんですが、その中でも私が A さんに提案したら採用されて上手くいった事案について軽く書きます。

### config を環境変数ではなくファイルで管理しようというアイディア

地味ですが、これ結構便利でした。環境変数で config 管理をすると読み込むときの処理（特に数字とか文字列以外の型のものの扱い）が煩雑になりやすく、また config に構成をあまり持たせられないなどの問題もあるので、ファイル（toml）で管理するとそこらへんの問題が一気に楽になります。

アイディア自体は私がどこかでたまたま思いついて、 A さんに提案したら最初少し渋い顔をされたけど試しでやってみたら本人もだいぶポジティブに受け取ってくれました。そのあと暇つぶしがてら自分の GitHub でこういう config 管理をするためのものを公開しました（https://github.com/Stealthmate/toomanysettings 、あまり真面目には触ってないですが・・）

### Kubernetes の導入

A さんが元々 VM に安直に SSH で入ってデプロイしてたのを見て、それだと面倒だし認証基盤でそんなことをすると危ないから Kubernetes でやろうぜと提案してみました。

結論から言うと、1年後には A さん自身が他のチームに Kubernetes を布教していたぐらい、この発想は定着しました。 ArgoCD など基本的なところを私が整備してから、 A さんに helm とかのことを教えつつ二人で監視基盤（Prometheus, Grafana) やログ基盤 (fluent-bit, Elastic Search) などを整備したり、パフォ検証して pod の数とか spec とかを調整したりしていました。良い思い出です。

### RADIUS プロトコルの研究と FreeRADIUS の導入

元々 Rust で自前で RADIUS サーバーを作っていたのですが、それだとプロトコルの細かい部分をあまりにもカバーできずだいぶ躓いていました。そこで私が RADIUS の本を一冊ちゃんと読んで、そこで FreeRADIUS というものに出会い、それを導入すれば技術負債が一気に減るぜとアピールしつつ導入。

実際は Rust サーバーと FreeRADIUS を両方運用することになったのですが、 FreeRADIUS で動いてた部分は（初期設定には結構躓いたものの）だいぶ安定した稼働になりました。一方これのおかげで私自身が RADIUS そのものだけでなく認証認可についてだいぶ詳しくなったと思います。少なくとも「認証」と「認可」の違いを人に教えられるぐらいには腑に落ちました。
