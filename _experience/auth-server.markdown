---
layout: experience
title: 認証サーバー構築と開発
toc: true
date: 2023-03-01
custom:
  period: 2023 年
  affiliation:
    title: LINEヤフー株式会社
    link: '#hist-ly-sec-eng'
  tags:
    - Python
    - Rust
    - RADIUS
    - Svelte
    - Prometheus
    - Fluent Bit
---

## 概要

旧 LINE 株式会社のセキュリティ部門でアルバイトしていた期間に任せらた最も重要なプロジェクトが、従業員がリモート就業時に利用する VPN の認証サーバーの開発でした。それまで使われていたサービスの EOL が発表され、代わりに自分たちで開発をしようという話が元々私のチームリーダーの A さんに降ってきました。最初に彼が簡単な PoC を作ったあと、私を交えて二人で本格的な開発を進めはじめましたが、途中から A さんが数ヶ月の育休に入り開発者が私だけになりました。彼が復活してからまた二人で最後の仕上げを行い、全部で合計 1 年程かかりました。

認証サーバーの主なパーツは以下です。

1. RADIUS プロトコルによる認証問い合わせを REST に変換して認証を媒介するサーバー
2. 従業員データベースと通信して認証認可の処理を行う HTTP API サーバー
3. 認可情報を管理するための Web UI
4. これらがデプロイされる Kubernetes クラスタと、そのクラスタを監視するためのログ・モニタリング周り

## 私の貢献

上述の通り開発者が私一人の期間が数ヶ月あったので、**上記のコンポーネントすべてに対して開発を行っていました**。ここでは、私が A さんに提案したら彼が実際に採用してくれて、結果的に上手く行った事案について書きたいと思います。

### config を環境変数ではなくファイルで管理しようというアイディア

地味ですが、これは結構便利でした。環境変数で config 管理をすると読み込むときの処理（特に数字とか文字列以外の型のものの扱い）が煩雑になりやすく、また config に構成をあまり持たせられないなどの問題もあるので、ファイル（toml）で管理するとそこらへんの問題が一気に楽になります。

アイディア自体は、確か私が毎回環境変数の読み込み処理を書くのをめんどくさがってるときに思いついたと記憶しています。実際、最初に A さんにそれを提案したときはどちらかというと愚痴の一貫のような感じでしたし、彼も少し渋い顔をしながら聞いていました。しかしまぁ、試しにやってみるのは良いのでは？という結論になり、実際にやってみたら環境変数を扱うよりはだいぶ楽になりました。

そのあと暇つぶしがてらで[自分の GitHub でこういう config 管理をするためのものを公開しました](https://github.com/Stealthmate/toomanysettings)。あまり真面目には開発していませんが・・・

### Kubernetes の導入

元々の PoC では、確か VM に安直に SSH で入ってデプロイしていたと記憶しています。一方で、当時の私は Kubernetes 信者成り立ての状態であり、 VM でやるのは面倒だし Kubernetes の方が圧倒的に便利だと信じていたのでそれを A さんに訴えました[^1]。

A さんは当時 Kubernetes 経験が一切なく、不安ではありました。しかしそれよりも純粋な興味を持ってくれたおかげで、一回はやってみよう！と積極的に私の提案に賛同してくれました。最初は私が彼に基本を教えつつ、いつの間にか二人で Slack で Huddle しながらペアプロをしたり、原因が分からない問題について頭を抱えたりなどしていました[^2]。

認証サーバーに話を戻します。 Kubernetes を導入するだけではなく、クラスタを前提としたサービスの考え方そのものを導入しました。具体的には、Prometheus や Grafana の導入や、 ArgoCD でのデプロイ仕組みの導入など、定番的なものもセットで導入し、使える状態にしました。加えてログ管理については Fluent Bit を使って Elastic Search にログを転送するようにしました。ただし認証サーバーでは監査ログというものも保存する必要があり、それに関しては同じ Fluent Bit を使いつつ別の処理フローを用意しました。

### RADIUS プロトコルの研究と FreeRADIUS の導入

元々の PoC では Rust で自前の RADIUS サーバーを作っていました。一番最初の要件で考えるならこれで良かったですし、実際にこのサーバーはずっと稼働していましたが、途中で要件が少しずつ増えていき、毎回 Rust で自前実装を行う負担も増えてきました。それを受けて、私は [RADIUS について真面目に勉強しました](https://www.oreilly.com/library/view/radius/0596003226/)。

勉強する中で認証や認可という抽象的な概念について深く知ることもできましたが、このプロジェクトの中で一番活きてくれたのは [FreeRADIUS](https://www.freeradius.org/) というものとの出会いでした。FreeRADIUS を使えば自前実装をしなくても問題を解決できると思ったからです。そしてそれをそのまま A さんに提案しました。

プロジェクトの途中から全く新しいものを入れることには想定通り抵抗がありましたが、ここでもやはり試しに一回やってみようという素晴らしい考え方のおかげで実験ができました。実際に FreeRADIUS をデプロイしてみるとやはり最初は辛かったです。成熟した OSS だとはいえ、全く問題がないわけでもなく、設定の問題を調べるときに提案者の私ですら何度もキレました。しかし一回設定すると稼働が安定しており、キレイに動いてくれました。

そうやって試行錯誤しながら、最終的には Rust での自前実装と FreeRADIUS を両方使うおことになりました。ある意味一番良くない状態とも言えますが、当時のプロジェクトの事情を考えるとまぁこれでも良かったと思っています。

---
{: .footnote-separator}

[^1]: 同じことを今やるなら多分 Terraform と VM だけでも良いと思いますが、当時は Terraform の知識がまだありませんでした。とにかく Kubernetes の界隈な「なんでも YAML 一枚でできる！」という雰囲気が意地元の利便性に感じていました。
[^2]: こうやって書いてみると、良い思い出だなと改めて感じました。 A さん本当にありがとう！