---
layout: experience
title: Firewall 管理ツールの開発と運用
toc: true
date: 2020-08-01
custom:
  period: 2020 年 〜 2022 年
  affiliation:
    title: LINEヤフー株式会社
    link: '#hist-ly-sec-eng'
  tags:
    - Python
    - django
    - VueJS
    - Kubernetes
    - Network
---

## 概要

2020 年 8 月に LINE 株式会社（現 LINE ヤフー株式会社）のセキュリティ部門に夏インターン性として入社し、LFMS というプロジェクトに加わりました。

LFMS とは LINE Firewall Management System の略称で、文字通り firewall の設定を管理するためのシステムです。具体的には、数種類の firewall 機器の設定を元々作業者が手で編集していたのを、簡易的な Web UI でもできるようにするためのものです。機器の種類に依存しない、抽象的な概念をいくつか定義し、それらを各種類の firewall 設定に自動的に変換できるような仕組みを作りました。この仕組みのおかげで、作業者の業務がかなり改善されました[^1]。

夏インターン自体は 6 週間でしたが、終わりのタイミングで当時の上司から「アルバイトをしてくれないか？」との声がかかり、そのままアルバイト雇用に変わることになりました。このようにして当時学部生だった私が、大学院を卒業するまでの 3 年間にわたり LINE のセキュリティ部門でアルバイトをすることになりました。そのうち、2020/10 から 2022/10 までの 2 年間は LFMS を担当していました。

インターン時の活動内容については、当時のブログ記事も残っているのでぜひご一読ください。

[An intern's tale of designing LINE's firewall secretary](https://engineering.linecorp.com/en/blog/designing-line-firewall-secretary)

### LFMS の経歴

この 2 年間において LFMS はだいぶ進化したので、私の具体的な貢献を語る前にその進化について軽く触れておきます。

私がインターン性として入った当初は、開発者がもう一人だけいました。当然ながら彼のメンターシップの下で私も開発をしていました。それから 1 年程経った頃、私のメンターが転職をして、開発者が私だけになりました。

LFMS の要件や意義そのものも、時間とともに変わっていきました。当初 firewall の設定を楽にするためのシステムだったのが、誤設定の検出、他システムとの情報の連携、今までのモデルで表現できなかった設定の実現など要件が増えていきました。また社内や社外の動向に影響され、既存部分の作り直しやアップデートなども求められました。スコープが拡大すると開発負荷も当然増えるので、特に開発者が私一人になってからは、そういう開発負荷を下げるべく様々な工夫をすることが必要になりました[^2]。

## 私の貢献

私の貢献を一言で言えば、**LINE という程の会社のセキュリティ用の膨大なシステムの設計・開発・運用をすべてアルバイト一人で請け負い、なお利用者に感激感謝された**ことです。幻想に聞こえるような話ですが、当時の採用人事に「それ本当に大丈夫？」って心配された程、こればかりは否めようがありません。本当の意味で [bus factor = 1](https://hackernoon.com/lang/ja/%E3%83%81%E3%83%BC%E3%83%A0%E3%81%8C%E5%A4%B1%E6%95%97%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB%E4%BD%95%E4%BA%BA%E3%81%AE%E3%83%81%E3%83%BC%E3%83%A0-%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E3%81%8C%E3%83%90%E3%82%B9%E3%81%AB%E3%81%B2%E3%81%8B%E3%82%8C%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%E3%81%AE%E3%83%90%E3%82%B9-%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%BC-%E3%82%B9%E3%82%B3%E3%82%A2) の状態で 2 年間過ごし、ときには旅先でバグ報告を受けて車のトランクを椅子代わりに修正とデプロイを行っていました[^3]。

さてと、具体的に貢献した内容についてですが、色々とあるのでここで 3 つだけピックアップして紹介したいと思います。

### CI/CD の導入

私が LFMS に加わった当初、開発過程は以下のような形で進んでいました。

1. コミットが main にマージされる。
2. 現場に触ってもらいたいようなコミットがある程度溜まったら、開発者がテスト VM にログインしてデプロイする。
3. 現場の人がテスト環境で変更箇所を軽く触り、問題があれば報告する。
4. ここまでで問題なければ（あるいは問題が解決されたら）、同じことを本番環境でやる。

システムの規模が小さかったときはこれでも良かったですが、規模が大きくなるとこの流れが段々しんどくなってきました。なぜなら

- ある程度大規模な改修をしようとすると現場のテスト負荷が増えすぎ、テスト環境ではバグを拾いきれず本番が壊れる。
- 「A の部分を修正してるから B が壊れるはずがない」という前提で開発をしても、結局 B が壊れるパターンがしばしば出ていた。
- デプロイ方法もデプロイするタイミングも完全に人の主観だったので、テスト環境も本番環境もいつどういう状態なのかが把握しにくく、ぱっと目に見えない変更が実際にデプロイされたかどうかが分からない。

当時の私はこの状態をなんとなく嫌だなと思い、色々調べていたら [CI/CD についての素晴らしい本](https://www.amazon.co.jp/dp/0321601912)に出会い、読みました。そこから影響を受け、 LFMS に以下の仕組みを導入しようとメンターに訴え、実際に導入しました。

- 簡単でも良いから何かしらの自動テストを用意して、 CircleCI とつなげる。
  - pylint
  - 一部のコードに対しての簡単な単体テスト
- デプロイする過程を script 化して、GHE での操作や CircleCI とつなげる。
  - テスト環境は開発ブランチの更新のたびに更新されるようにする。
  - 本番環境は main ブランチへの tag をプッシュしたときに更新されるようにする。

この 2 つの仕組みを導入することで、デプロイに関わる問題を減らすことに成功しました。単体テストについては、そもそもコードがテストしやすい状態に書かれておらずだった[^4]のでちょっとしか検証しかできませんでしたが、それでも前よりはマシになりました。

### Microservice への分割

LFMS は色んなシステムと連携し、色んな機能を提供していました。その中で、落ちても困らない機能と落ちたらかなりまずい機能が混ざっていました。開発当初の頃はそこの線引きを意識する必要はさほどなかったのですが、規模が増えるにつれてこの問題と改めて向き合う必要が出てきました。

その影響を受けて、私はやはり調べものと読書に頼りました。その中で出会ったのは、当然ながら [Microservice](https://www.amazon.co.jp/dp/1491950358) という発想でした。

結論から言うと LFMS から一部分だけマイクロサービスとう形で切り出すことになりました。どういう部分かというと、 firewall の現状の保存とそれに対する問い合わせを行うための部分です。当時の私はまだこの単語を知らなかったのですが、いわゆる [CQRS](https://en.wikipedia.org/wiki/Command_Query_Responsibility_Segregation) という考え方に非常に似ているようなことをしていました。 firewall への書き込みは LFMS 本体で行い、読み込みだけ切り出された部分に任せる。そうすることで本体に何か問題があったとしても、読み込みはほぼ通常通りできるようになりました。 

「貢献」は一旦ここまでですが、反省についても少しだけ書きます。今だから分かることですが、当時の「マイクロサービス」の切り出し方はいわゆる [distributed monolith](https://mehmetozkaya.medium.com/microservices-antipattern-the-distributed-monolith-%EF%B8%8F-46d12281b3c2) を生み出す作業そのものであり、マイクロサービスを間違って使った場合の（最悪の）アンチパターンの典型的な例でした。今だったらそうではなく modular monolith を目指すと思います。ただこういうアンチパターンを経験したことで、逆にグッドパターンのありがたみも身を持って実感できるようになったので、結果的には良い経験になったと思います。

### Kubernetes の導入とスケールアウト

始めの頃、 LFMS は普通の VM にデプロイされていました。当時の私は Terraform 等の存在を一切知らず、また本番環境を暑かった経験もほとんどなく、これが普通だと思う以外の選択肢がありませんでした。

しかし上記のように CI/CD の仕組みを導入しはじめてから少しずつ現状の構成の問題が浮かび上がりました。 VM のホストネームをどこかしらにハードコードしないといけなかったり、 VM 内の環境の些細な変化が起こす問題に出会ったり、処理性能を上げるときの対応がわからなかったりと、色んな悩みがありました。

ちょうどその頃、社内では Kubernetes が使えるようになりました。当時の私は「Kubernetes」という名称を色んな掲示板で見て覚えていたものの、それが具体的に何なのかを知らず、とにかく「docker よりワンランク上の便利さがあるけどその分複雑である」という印象しかありませんでした。LFMS の問題と日々向き合っていると Kubernetes の名前を見る回数が段々増えていき、あるとき「だったらいっそのこと Kubernetes で頑張ってみた方が良いかも」という判断に至りました。

そのときにはすでに開発者が私一人だけになっていたので、こういう判断（というより決断）は私の独断で実行しても良い状態でした。ゆえに、サービスを落とすことを大前提に、一回は Kubernetes で遊んでみようと決めました。

以降 1 年かけて色々と試行錯誤し、当時のセキュリティ部門の中でおそらく一番 Kubernetes に詳しい人間になりました[^5]。一方、 LFMS 自体の管理も非常に楽になりました。本体のコードが相変わらず複雑でしたが、デプロイ過程や安定性は以前よりもずっと高まり、またスケールアウトも容易にできるようになりました。「〇〇処理にこれだけ時間がかかるのはおそすぎるから速くできないか？」と聞かれて「わかりました、速くしてみます」と言ってその場でレプリカを増やすなんてことも確かありました。

## 最後に

LFMS というプロジェクトは、私が初めて請け負った「デカい」プロジェクトでした。今思うと、要件自体はそこまで重くなかったのですが、私が（無意識のうちに）自分の練習の場としてそれを使えたおかげで、おそらく今までの開発者キャリアの中で一番成長できたんじゃないかと思います。もし今の自分が再びそのプロジェクトに投入されたら、おそらく昔の自分が書いたコードにずっとキレながら直していくとは思います。 Kubernetes ももしかすると使わない方が良いと判断するかもしれません。ただまぁ、今これが言えるのは、間違いなく昔の試行錯誤と失敗があったからだと思っています。

---
{: .footnote-separator}

[^1]: 実際の業務時間の変化を数字では測っていませんがが、現場担当者からはいつもニコニコした顔で「ヴァレリさんのシステムすごい！」と言われていたのでそれなりの効果があったんだろうなと思っています。
[^2]: これ自体は事実ですが、その建付けで私が興味を持っている技術を導入する機会にもなりました。
[^3]: 今でも覚えていますが、2022 年 8 月に東北を一人で一周していて、岩手県の浄土ヶ浜海浜という場所でちょうど車に戻ったときに「何か落ちてる！設定作業間に合わないかも」と Slack が来て、しょうがないから一回 PC を取り出して、周りに見られると困るからトランクを開けてそこで座り、携帯の電波で原因調査・修正・デプロイを 1 時間ぐらいで終わらせました。
[^4]: これに関しては主に私の未熟さが原因だったなと今では思います。テストを導入しはじめた頃にはほぼ私しかコードを書いておらず、また当時にはテストしやすいコードの書き方がまだ見についておらず、色々試行錯誤しつつ壮大なスパゲッティコードを生み出していました。まぁ、そのおかげで今はキレイに書けますが。
[^5]: 何故これが言い切れるのかというと、後にチーム再編成を経て[別のプロジェクト](https://stealthmate.github.io/experience/auth-server.html)に関わることになったとき、他の正社員に Kubernetes を教えていたのが私だからです。